import { type Appearance } from './types';
export declare const containerStyles: (appearance: Appearance, width?: string | number) => {
    readonly borderStyle: "none" | "solid";
    readonly boxSizing: "border-box";
    readonly display: "flex";
    readonly flex: "1 1 100%";
    readonly font: "var(--ds-font-body)";
    readonly justifyContent: "space-between";
    readonly maxWidth: string | number;
    readonly overflow: "hidden";
    readonly transition: "background-color 0.2s ease-in-out, border-color 0.2s ease-in-out";
    readonly wordWrap: "break-word";
    readonly verticalAlign: "top";
    readonly pointerEvents: "auto";
    readonly padding?: string | undefined;
    readonly borderRadius: 3;
    readonly borderWidth: "var(--ds-border-width)";
    readonly backgroundColor: string;
    readonly borderColor: string;
    readonly color: "var(--ds-text)";
    readonly cursor: string;
    readonly '&:hover:not([data-disabled])': {
        backgroundColor: string;
        borderColor: string;
    };
    readonly '&:focus-within:not([data-disabled])': {
        backgroundColor: string;
        borderColor: string;
        boxShadow: string;
    };
    readonly '&[data-disabled]': {
        backgroundColor?: "var(--ds-background-disabled)" | undefined;
        borderColor?: "var(--ds-background-disabled)" | undefined;
        color: "var(--ds-text-disabled)";
        cursor: string;
    };
    readonly '&[data-invalid], &[data-invalid]:hover': {
        borderColor: "var(--ds-border-danger)";
        boxShadow: string;
    };
    readonly '&[data-invalid]:focus-within': {
        backgroundColor: "var(--ds-background-input-pressed)";
        borderColor: "var(--ds-border-focused)";
        boxShadow: string;
    };
    readonly '@media screen and (-ms-high-contrast: active)': {
        '&[data-invalid]:focus-within': {
            borderColor: string;
        };
        '&:focus-within': {
            borderColor: string;
        };
        '&[data-disabled]': {
            borderColor: string;
        };
    };
    readonly alignItems: "center";
};
export declare const inputStyles: () => {
    readonly backgroundColor: "transparent";
    readonly border: 0;
    readonly boxSizing: "border-box";
    readonly color: "inherit";
    readonly cursor: "inherit";
    readonly font: "var(--ds-font-body)";
    readonly minWidth: "0";
    readonly outline: "none";
    readonly width: "100%";
    readonly '&[data-monospaced]': {
        readonly fontFamily: "var(--ds-font-family-code)";
    };
    readonly '&[data-compact]': {
        readonly padding: "var(--ds-space-050) var(--ds-space-075)";
    };
    readonly '&:not([data-compact])': {
        readonly padding: "var(--ds-space-100) var(--ds-space-075)";
    };
    readonly '&[disabled]': {
        readonly WebkitTextFillColor: "var(--ds-text-disabled)";
    };
    readonly '&::-ms-clear': {
        readonly display: "none";
    };
    readonly '&:invalid': {
        readonly boxShadow: "none";
    };
    readonly '&:placeholder-shown': {
        readonly textOverflow: "ellipsis";
    };
    readonly '&::placeholder': {
        readonly color: "var(--ds-text-subtlest)";
        readonly '&:disabled': {
            readonly color: "var(--ds-text-disabled)";
        };
    };
    readonly '@media screen and (-ms-high-contrast: active)': {
        readonly '&[disabled]': {
            readonly color: "GrayText";
        };
    };
};
