import { B200, N0, N10, N100, N200, N30, N70, N900, R400 } from '@atlaskit/theme/colors';
const backgroundColor = {
  standard: `var(--ds-background-input, ${N10})`,
  subtle: 'transparent',
  none: 'transparent'
};
const backgroundColorFocus = {
  standard: `var(--ds-background-input-pressed, ${N0})`,
  subtle: `var(--ds-background-input-pressed, ${N0})`,
  none: 'transparent'
};
const backgroundColorHover = {
  standard: `var(--ds-background-input-hovered, ${N30})`,
  subtle: `var(--ds-background-input-hovered, ${N30})`,
  none: 'transparent'
};
const borderColor = {
  standard: `var(--ds-border-input, ${N100})`,
  subtle: 'transparent',
  none: 'transparent'
};
const borderColorFocus = {
  standard: `var(--ds-border-focused, ${B200})`,
  subtle: `var(--ds-border-focused, ${B200})`,
  none: 'transparent'
};
const borderColorHover = {
  standard: `var(--ds-border-input, ${N100})`,
  subtle: "var(--ds-border-input, transparent)",
  none: 'transparent'
};
const getContainerTextBgAndBorderColor = appearance => ({
  backgroundColor: backgroundColor[appearance],
  borderColor: borderColor[appearance],
  color: `var(--ds-text, ${N900})`,
  cursor: 'text',
  '&:hover:not([data-disabled])': {
    backgroundColor: backgroundColorHover[appearance],
    borderColor: borderColorHover[appearance]
  },
  '&:focus-within:not([data-disabled])': {
    backgroundColor: backgroundColorFocus[appearance],
    borderColor: borderColorFocus[appearance],
    boxShadow: `inset 0 0 0 ${"var(--ds-border-width, 1px)"} ${borderColorFocus[appearance]}`
  },
  '&[data-disabled]': {
    color: `var(--ds-text-disabled, ${N70})`,
    cursor: 'not-allowed',
    // Disabled background and border styles should not be applied to components that
    // have either no background or transparent background to begin with
    ...(appearance === 'standard' && {
      backgroundColor: `var(--ds-background-disabled, ${N10})`,
      borderColor: `var(--ds-background-disabled, ${N10})`
    })
  },
  '&[data-invalid], &[data-invalid]:hover': {
    borderColor: `var(--ds-border-danger, ${R400})`,
    boxShadow: `inset 0 0 0 ${"var(--ds-border-width, 1px)"} ${`var(--ds-border-danger, ${R400})`}`
  },
  '&[data-invalid]:focus-within': {
    backgroundColor: `var(--ds-background-input-pressed, ${N0})`,
    borderColor: `var(--ds-border-focused, ${B200})`,
    boxShadow: `inset 0 0 0 ${"var(--ds-border-width, 1px)"} ${`var(--ds-border-focused, ${B200})`}`
  },
  '@media screen and (-ms-high-contrast: active)': {
    '&[data-invalid]:focus-within': {
      borderColor: 'Highlight'
    },
    '&:focus-within': {
      borderColor: 'Highlight'
    },
    '&[data-disabled]': {
      borderColor: 'GrayText'
    }
  }
});
const widthMap = {
  xsmall: 80,
  small: 160,
  medium: 240,
  large: 320,
  xlarge: 480
};
const getMaxWidth = width => !width ? `100%` : width in widthMap ? widthMap[width] : +width;
export const containerStyles = (appearance, width) => ({
  alignItems: 'center',
  ...getContainerTextBgAndBorderColor(appearance),
  borderRadius: 3,
  borderWidth: "var(--ds-border-width, 1px)",
  // add 1px padding on both top and bottom to keep the same overall height after border reduced from 2px to 1px under feature flag
  ...(appearance !== 'none' ? {
    padding: `${"var(--ds-border-width, 1px)"} 0`
  } : {}),
  borderStyle: appearance === 'none' ? 'none' : 'solid',
  boxSizing: 'border-box',
  display: 'flex',
  flex: '1 1 100%',
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  justifyContent: 'space-between',
  maxWidth: getMaxWidth(width),
  overflow: 'hidden',
  transition: `background-color 0.2s ease-in-out, border-color 0.2s ease-in-out`,
  wordWrap: 'break-word',
  verticalAlign: 'top',
  pointerEvents: 'auto'
});
export const inputStyles = () => ({
  backgroundColor: 'transparent',
  border: 0,
  boxSizing: 'border-box',
  color: 'inherit',
  cursor: 'inherit',
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  minWidth: '0',
  outline: 'none',
  width: '100%',
  '&[data-monospaced]': {
    fontFamily: "var(--ds-font-family-code, ui-monospace, Menlo, \"Segoe UI Mono\", \"Ubuntu Mono\", monospace)"
  },
  '&[data-compact]': {
    padding: `${"var(--ds-space-050, 4px)"} ${"var(--ds-space-075, 6px)"}`
  },
  '&:not([data-compact])': {
    padding: `${"var(--ds-space-100, 8px)"} ${"var(--ds-space-075, 6px)"}`
  },
  '&[disabled]': {
    // Safari (WebKit) adds a -webkit-text-fill-color style to disabled inputs
    // which takes priority over color and makes the text unreadable. Need to
    // override it with the color we want.
    WebkitTextFillColor: `var(--ds-text-disabled, ${N70})`
  },
  // Hide the clear indicator on Edge (Windows only)
  '&::-ms-clear': {
    display: 'none'
  },
  '&:invalid': {
    boxShadow: 'none'
  },
  '&:placeholder-shown': {
    textOverflow: 'ellipsis'
  },
  '&::placeholder': {
    color: `var(--ds-text-subtlest, ${N200})`,
    '&:disabled': {
      color: `var(--ds-text-disabled, ${N70})`
    }
  },
  '@media screen and (-ms-high-contrast: active)': {
    '&[disabled]': {
      color: 'GrayText'
    }
  }
});