import _extends from "@babel/runtime/helpers/extends";
import _typeof from "@babel/runtime/helpers/typeof";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["appearance", "className", "elemAfterInput", "elemBeforeInput", "isCompact", "isDisabled", "isInvalid", "isMonospaced", "isReadOnly", "isRequired", "name", "onBlur", "onChange", "onFocus", "onMouseDown", "placeholder", "testId", "width"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { forwardRef, useCallback, useMemo, useRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import { containerStyles as getContainerStyles, inputStyles as getInputStyles } from './styles';
var analyticsParams = {
  componentName: 'textField',
  packageName: "@atlaskit/textfield",
  packageVersion: "6.5.1"
};

/**
 * __Textfield__
 *
 * A text field is an input that allows a user to write or edit text.
 *
 * - [Examples](https://atlassian.design/components/textfield/examples)
 * - [Code](https://atlassian.design/components/textfield/code)
 * - [Usage](https://atlassian.design/components/textfield/usage)
 */
var Textfield = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$appearance = props.appearance,
    appearance = _props$appearance === void 0 ? 'standard' : _props$appearance,
    className = props.className,
    elemAfterInput = props.elemAfterInput,
    elemBeforeInput = props.elemBeforeInput,
    _props$isCompact = props.isCompact,
    isCompact = _props$isCompact === void 0 ? false : _props$isCompact,
    _props$isDisabled = props.isDisabled,
    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
    _props$isInvalid = props.isInvalid,
    isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
    _props$isMonospaced = props.isMonospaced,
    isMonospaced = _props$isMonospaced === void 0 ? false : _props$isMonospaced,
    _props$isReadOnly = props.isReadOnly,
    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,
    _props$isRequired = props.isRequired,
    isRequired = _props$isRequired === void 0 ? false : _props$isRequired,
    name = props.name,
    onBlur = props.onBlur,
    onChange = props.onChange,
    onFocus = props.onFocus,
    onMouseDown = props.onMouseDown,
    placeholder = props.placeholder,
    testId = props.testId,
    width = props.width,
    spreadProps = _objectWithoutProperties(props, _excluded);
  var inputRef = useRef(null);
  var handleOnFocus = usePlatformLeafEventHandler(_objectSpread({
    fn: function fn(event) {
      onFocus && onFocus(event);
    },
    action: 'focused'
  }, analyticsParams));
  var handleOnBlur = usePlatformLeafEventHandler(_objectSpread({
    fn: function fn(event) {
      onBlur && onBlur(event);
    },
    action: 'blurred'
  }, analyticsParams));
  var handleOnMouseDown = useCallback(function (event) {
    // Running e.preventDefault() on the INPUT prevents double click behaviour
    // Sadly we needed this cast as the target type is being correctly set
    var target = event.target;
    if (target.tagName !== 'INPUT') {
      event.preventDefault();
    }
    if (inputRef && inputRef.current && !isDisabled && document.activeElement !== inputRef.current) {
      inputRef.current.focus();
    }
    onMouseDown && onMouseDown(event);
  }, [onMouseDown, isDisabled]);
  var setInputRef = useCallback(function (inputElement) {
    inputRef.current = inputElement;
    if (!ref) {
      return;
    }
    if (_typeof(ref) === 'object') {
      ref.current = inputElement;
    }
    if (typeof ref === 'function') {
      ref(inputElement);
    }
  }, [ref]);
  var containerStyles = useMemo(function () {
    return getContainerStyles(appearance, width);
  }, [appearance, width]);
  var inputStyle = getInputStyles();
  return (
    /**
     * It is not normally acceptable to add click and key handlers to
     * non-interactive elements as this is an accessibility anti-pattern.
     * However, because this instance is to handle events on all children that
     * should be associated with the input, we can add role="presentation" so
     * that there are no negative impacts to assistive technologies.
     */
    jsx("div", {
      role: "presentation",
      "data-disabled": isDisabled ? isDisabled : undefined,
      "data-invalid": isInvalid ? isInvalid : undefined,
      "data-ds--text-field--container": true,
      "data-testid": testId && "".concat(testId, "-container"),
      onMouseDown: handleOnMouseDown
      // TODO: When removing legacy theming fix this.
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      ,
      css: containerStyles
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: className
    }, elemBeforeInput, jsx("input", _extends({}, spreadProps, {
      "aria-invalid": isInvalid ? isInvalid : undefined
      // TODO: When removing legacy theming fix this.
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      ,
      css: inputStyle,
      "data-compact": isCompact ? isCompact : undefined,
      "data-ds--text-field--input": true,
      "data-monospaced": isMonospaced ? isMonospaced : undefined,
      "data-testid": testId,
      disabled: isDisabled,
      name: name,
      onBlur: handleOnBlur,
      onChange: onChange,
      onFocus: handleOnFocus,
      placeholder: placeholder,
      readOnly: isReadOnly,
      ref: setInputRef,
      required: isRequired
    })), elemAfterInput)
  );
});
export default Textfield;