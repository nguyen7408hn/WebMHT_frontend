"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _analyticsNext = require("@atlaskit/analytics-next");
var _styles = require("./styles");
var _excluded = ["appearance", "className", "elemAfterInput", "elemBeforeInput", "isCompact", "isDisabled", "isInvalid", "isMonospaced", "isReadOnly", "isRequired", "name", "onBlur", "onChange", "onFocus", "onMouseDown", "placeholder", "testId", "width"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof3(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var analyticsParams = {
  componentName: 'textField',
  packageName: "@atlaskit/textfield",
  packageVersion: "6.5.1"
};

/**
 * __Textfield__
 *
 * A text field is an input that allows a user to write or edit text.
 *
 * - [Examples](https://atlassian.design/components/textfield/examples)
 * - [Code](https://atlassian.design/components/textfield/code)
 * - [Usage](https://atlassian.design/components/textfield/usage)
 */
var Textfield = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _props$appearance = props.appearance,
    appearance = _props$appearance === void 0 ? 'standard' : _props$appearance,
    className = props.className,
    elemAfterInput = props.elemAfterInput,
    elemBeforeInput = props.elemBeforeInput,
    _props$isCompact = props.isCompact,
    isCompact = _props$isCompact === void 0 ? false : _props$isCompact,
    _props$isDisabled = props.isDisabled,
    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
    _props$isInvalid = props.isInvalid,
    isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
    _props$isMonospaced = props.isMonospaced,
    isMonospaced = _props$isMonospaced === void 0 ? false : _props$isMonospaced,
    _props$isReadOnly = props.isReadOnly,
    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,
    _props$isRequired = props.isRequired,
    isRequired = _props$isRequired === void 0 ? false : _props$isRequired,
    name = props.name,
    onBlur = props.onBlur,
    onChange = props.onChange,
    onFocus = props.onFocus,
    onMouseDown = props.onMouseDown,
    placeholder = props.placeholder,
    testId = props.testId,
    width = props.width,
    spreadProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var inputRef = (0, _react.useRef)(null);
  var handleOnFocus = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: function fn(event) {
      onFocus && onFocus(event);
    },
    action: 'focused'
  }, analyticsParams));
  var handleOnBlur = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: function fn(event) {
      onBlur && onBlur(event);
    },
    action: 'blurred'
  }, analyticsParams));
  var handleOnMouseDown = (0, _react.useCallback)(function (event) {
    // Running e.preventDefault() on the INPUT prevents double click behaviour
    // Sadly we needed this cast as the target type is being correctly set
    var target = event.target;
    if (target.tagName !== 'INPUT') {
      event.preventDefault();
    }
    if (inputRef && inputRef.current && !isDisabled && document.activeElement !== inputRef.current) {
      inputRef.current.focus();
    }
    onMouseDown && onMouseDown(event);
  }, [onMouseDown, isDisabled]);
  var setInputRef = (0, _react.useCallback)(function (inputElement) {
    inputRef.current = inputElement;
    if (!ref) {
      return;
    }
    if ((0, _typeof2.default)(ref) === 'object') {
      ref.current = inputElement;
    }
    if (typeof ref === 'function') {
      ref(inputElement);
    }
  }, [ref]);
  var containerStyles = (0, _react.useMemo)(function () {
    return (0, _styles.containerStyles)(appearance, width);
  }, [appearance, width]);
  var inputStyle = (0, _styles.inputStyles)();
  return (
    /**
     * It is not normally acceptable to add click and key handlers to
     * non-interactive elements as this is an accessibility anti-pattern.
     * However, because this instance is to handle events on all children that
     * should be associated with the input, we can add role="presentation" so
     * that there are no negative impacts to assistive technologies.
     */
    (0, _react2.jsx)("div", {
      role: "presentation",
      "data-disabled": isDisabled ? isDisabled : undefined,
      "data-invalid": isInvalid ? isInvalid : undefined,
      "data-ds--text-field--container": true,
      "data-testid": testId && "".concat(testId, "-container"),
      onMouseDown: handleOnMouseDown
      // TODO: When removing legacy theming fix this.
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      ,
      css: containerStyles
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: className
    }, elemBeforeInput, (0, _react2.jsx)("input", (0, _extends2.default)({}, spreadProps, {
      "aria-invalid": isInvalid ? isInvalid : undefined
      // TODO: When removing legacy theming fix this.
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      ,
      css: inputStyle,
      "data-compact": isCompact ? isCompact : undefined,
      "data-ds--text-field--input": true,
      "data-monospaced": isMonospaced ? isMonospaced : undefined,
      "data-testid": testId,
      disabled: isDisabled,
      name: name,
      onBlur: handleOnBlur,
      onChange: onChange,
      onFocus: handleOnFocus,
      placeholder: placeholder,
      readOnly: isReadOnly,
      ref: setInputRef,
      required: isRequired
    })), elemAfterInput)
  );
});
var _default = exports.default = Textfield;