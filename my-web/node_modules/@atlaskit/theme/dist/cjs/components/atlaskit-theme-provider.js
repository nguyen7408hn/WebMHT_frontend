"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _colors = require("../colors");
var _constants = require("../constants");
var _useThemeResetStyles = _interopRequireWildcard(require("./hooks/use-theme-reset-styles"));
var _theme = _interopRequireDefault(require("./theme"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// For forward-compat until everything is upgraded.

var themeFnMap = {
  dark: function dark() {
    return {
      mode: 'dark'
    };
  },
  light: function light() {
    return {
      mode: 'light'
    };
  }
};

/**
 *
 * @deprecated {@link https://hello.atlassian.net/browse/ENGHEALTH-4693 Internal documentation for deprecation (no external access)}
 *
 * __Atlaskit Theme Provider__
 *
 * The global theme provider is used to provide theme context to an application.
 * It should be used once in application code at the root, or as near to the root as possible,
 * to inject the global theme via React context.
 *
 * - [Examples](https://atlaskit.atlassian.com/examples/design-system/theme)
 *
 * @example
 * ```jsx
 * import { AtlaskitThemeProvider } from '@atlaskit/theme/components';
 *
 * const App = () => (
 *  <AtlaskitThemeProvider mode="dark">
 *   <App />
 *  </AtlaskitThemeProvider>
 * );
 * ```
 */
var AtlaskitThemeProvider = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? _constants.DEFAULT_THEME_MODE : _ref$mode,
    background = _ref.background,
    children = _ref.children;
  // background color is extracted here is it conditionally applied on the <body>
  var themeObj = {
    theme: {
      mode: mode
    }
  };
  var backgroundColor = background ? background(themeObj) : "var(--ds-surface, ".concat(_colors.N0, ")");
  (0, _useThemeResetStyles.default)(backgroundColor);
  return /*#__PURE__*/_react.default.createElement(_theme.default.Provider, {
    value: themeFnMap[mode]
  }, /*#__PURE__*/_react.default.createElement("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: "".concat(mode, "-").concat(_useThemeResetStyles.SELECTOR)
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    ,
    style: {
      backgroundColor: backgroundColor
    },
    "data-testid": "theme-provider"
  }, children));
});
var _default = exports.default = AtlaskitThemeProvider;